

# Feature Requests

## version
Print out version of probcli running.
--> this could be implemented by allowing access to external functions in Jupyter
    PROB_INFO_STR("prob-version") would then return this information.
    To enable this one would need to load a machine
    MACHINE Jupyter
    DEFINITIONS "LibraryMeta.def"; "LibraryStrings.def" END
    
## z3/cvc4/kodkod:
Allow predicates to be evaluated with an alternate backend

## pretty print a B formula in Latex/Unicode
Be able to pretty print a formula, possibly without evaluating it.

## asserting a predicate
This would be useful in a manual: ensure that the results
are as expected and print a big red warning if not.
For example:
 :assert DEC_STRING_TO_INT("10000000000000000000000000000000000",-32)=100

This could also be used as a kind of test or for
notebooks to be filled in by students, where the teacher
has added the asserts at the bottom.

## Displaying evaluation results

### show result of an evaluation as a table
E.g., show {1|->"a", 2|->"b"} as a table.

### show result of an evaluation as a dot/sfdp graph

### show result of an evaluation as a chart

### display ANIMATION_FUNCTION as a table/grid in the notebook


## other probcli REPL commands

### show type of a formula

### let, unlet, store

### browse lets and stored results


## Animation

### allow to execute an operation
similar to :exec or -animate Nr probcli REPL commands

### allow to execute other dot commands
i.e., machine hierarchy, ...


# Issues

## Unknown should be reported
In the chr_tests notebook, the second call to x>y & y>x
(with enumeration warning) should probably be accompanied by the result
UNKNOWN

## stdlib contents not available to ProB2 parser

::load
MACHINE Jupyter
    DEFINITIONS "LibraryMeta.def"; "LibraryStrings.def"
END

generates

de.prob.exception.ProBError: ProB returned error messages:
Error: Definition file cannot be read: Loading of file content not supported.
	at de.prob.scripting.ClassicalBFactory.parseString(ClassicalBFactory.java:137)
	at de.prob.scripting.ClassicalBFactory.create(ClassicalBFactory.java:55)
	at de.prob2.jupyter.commands.LoadCellCommand.run(LoadCellCommand.java:49)
	at de.prob2.jupyter.ProBKernel.executeCellCommand(ProBKernel.java:98)
	at de.prob2.jupyter.ProBKernel.eval(ProBKernel.java:168)
	at io.github.spencerpark.jupyter.kernel.BaseKernel.handleExecuteRequest(BaseKernel.java:282)
	at io.github.spencerpark.jupyter.channels.ShellChannel.lambda$bind$0(ShellChannel.java:50)
	at java.lang.Thread.run(Thread.java:748)
	at io.github.spencerpark.jupyter.channels.Loop.run(Loop.java:39)
